* Part 1: Yelp Dataset Profiling and Understanding

** Profile the data by finding the total number of records for each of the tables below:

#+begin_src sql
 select count(*) as number_of_entries from user;
#+end_src

| table       | number of entries |
|-------------+-------------------|
| Attribute   |             10000 |
| Business    |             10000 |
| Category    |             10000 |
| Checkin     |             10000 |
| elite_years |             10000 |
| friend      |             10000 |
| hours       |             10000 |
| photo       |             10000 |
| review      |             10000 |
| tip         |             10000 |
| user        |             10000 |

** Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

#+begin_src sql
 select count(distinct user_id) from friend
#+end_src

| table       | key         | distinct entries |
|-------------+-------------+------------------|
| hours       | business_id |             1562 |
| checkin     | business_id |              493 |
| tip         | business_id |             3979 |
| category    | business    |             2643 |
| attribute   | business    |             1115 |
| user        | id          |            10000 |
| business    | id          |            10000 |
| photo       | id          |            10000 |
| review      | id          |            10000 |
| elite_years | user_id     |             2780 |
| friend      | user_id     |               11 |

** Are there any columns with null values in the Users table? Indicate "yes," or "no."

No.
#+begin_src sql
SELECT *
FROM user
WHERE id IS NULL 
 OR name IS NULL
 OR review_count IS NULL
 OR yelping_since IS NULL
 OR useful IS NULL
 OR funny IS NULL
 OR cool IS NULL
 OR fans IS NULL
 OR average_stars IS NULL
 OR compliment_hot IS NULL
 OR compliment_more IS NULL
 OR compliment_profile IS NULL
 OR compliment_cute IS NULL
 OR compliment_list IS NULL
 OR compliment_note IS NULL
 OR compliment_plain IS NULL
 OR compliment_cool IS NULL
 OR compliment_funny IS NULL
 OR compliment_writer IS NULL
 OR compliment_photos IS NULL;	  
#+end_src

** For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:
		
	#+begin_src sql
	 select max(review_count) from user;
         select min(review_count) from user;
	 select avg(review_count) from user; 
	#+end_src

| table    | column       | min |  max |     avg |
|----------+--------------+-----+------+---------|
| Review   | Stars        |   1 |    5 |  3.7082 |
| Business | Stars        |   1 |    5 |  3.6549 |
| Tip      | Likes        |   0 |    2 |  0.0144 |
| Checkin  | Count        |   1 |   53 |  1.9414 |
| User     | Review_count |   0 | 2000 | 24.2995 |
|          |              |     |      |         |

** List the cities with the most reviews in descending order:

#+begin_src sql
    select city, sum(review_count) as sum_of_review from business
	   group by city
	   order by sum_of_reviews desc; 	  
#+end_src

| city            | sum_of_reviews |
|-----------------+----------------|
| Las Vegas       |          82854 |
| Phoenix         |          34503 |
| Toronto         |          24113 |
| Scottsdale      |          20614 |
| Charlotte       |          12523 |
| Henderson       |          10871 |
| Tempe           |          10504 |
| Pittsburgh      |           9798 |
| Montr√©al        |           9448 |
| Chandler        |           8112 |
| Mesa            |           6875 |
| Gilbert         |           6380 |
| Cleveland       |           5593 |
| Madison         |           5265 |
| Glendale        |           4406 |
| Mississauga     |           3814 |
| Edinburgh       |           2792 |
| Peoria          |           2624 |
| North Las Vegas |           2438 |
| Markham         |           2352 |
| Champaign       |           2029 |
| Stuttgart       |           1849 |
| Surprise        |           1520 |
| Lakewood        |           1465 |
| Goodyear        |           1155 |
# (Output limit exceeded, 25 of 362 total rows shown)

** Find the distribution of star ratings to the business in the following cities
*** Avon
#+begin_src sql
select stars, count(stars) as number
from business
where city = "Avon"
group by stars;
#+end_src

| stars | number |
|-------+--------|
|   1.5 |      1 |
|   2.5 |      2 |
|   3.5 |      3 |
|   4.0 |      2 |
|   4.5 |      1 |
|   5.0 |      1 |

*** Beachwood
#+begin_src sql
  select stars, count(stars) as number
  from business
  where city = "Beachwood"
  group by stars;
#+end_src

| stars | number |
|   2.0 |      1 |
|   2.5 |      1 |
|   3.0 |      2 |
|   3.5 |      2 |
|   4.0 |      1 |
|   4.5 |      2 |
|   5.0 |      5 |

** Find the top 3 users based on their total number of reviews:

#+begin_src sql
   select name, review_count
	  from user order by review_count desc
	  limit 3;
#+end_src

| name   | review_count |
|--------+--------------|
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |

** Does posing more reviews correlate with more fans?
The number of fans is analyzed fir to see how it's distributed:
#+begin_src sql
select min(fans), max(fans), avg(fans) from user ;
#+end_src
+-----------+-----------+-----------+
| min(fans) | max(fans) | avg(fans) |
+-----------+-----------+-----------+
|         0 |       503 |    1.4896 |
+-----------+-----------+-----------+
We then see how the number of review counts are distributed:
#+begin_src sql
select min(review_count), max(review_count), avg(review_count) from user ; 
#+end_src
+-------------------+-------------------+-------------------+
| min(review_count) | max(review_count) | avg(review_count) |
+-------------------+-------------------+-------------------+
|                 0 |              2000 |           24.2995 |
+-------------------+-------------------+-------------------+

Now we propose three categories of review counts as follows:
- Low activity: less than 50 reviews
- Medium activity: between 50 and 500
- High activity: more than 500 reviews 
In the next step we investigate whether this is related to the number
of fans:
#+begin_src sql
SELECT  count(review_count) as number_of_users, avg(fans) as average_num_fans,
CASE
   WHEN review_count < 50 then 'Low Activity'
   WHEN review_count between 50 and 500 then 'Medium Activity'
   WHEN review_count > 500 then 'High Activity'
END as activity
FROM user group by activity;
#+end_src

| number_of_users |   average_num_fans | activity        |
|-----------------+--------------------+-----------------|
|              48 |  85.27083333333333 | High Activity   |
|            9020 | 0.2870288248337029 | Low Activity    |
|             932 |  8.813304721030043 | Medium Activity |

In the code, we used a case statement to discern between different
categories and then calculated average of fans in each category. We
can see that as the activity gets higher, the number of fans grows
considerably. Therefore there is a correlation between the number of
reviews and number of fans. Also, we can see that most of the users
are in the low activity group and a minority in the high activity group. 

** Are there more reviews with the word "love" or with the word "hate" in them?

#+begin_src sql
  select count(text) as number_of_incidences,
	 case when
	 (text like '%hate%' or text like 'hate%' or text like '%hate') then 'hate'
	 when
	 (text like '%love%' or text like 'love%' or text like '%love') then 'love'
	 end as content
	 from review
	 group by content;
#+end_src

| number_of_incidences | content |
|----------------------+---------|
|                 8042 |    None |
|                  232 |    hate |
|                 1726 |    love |

We can see from the output that there are many more comments with the
word love rather than hate. We can also see that most of the comments
have neither love nor hate in them.  

** Find the top 10 users with the most fans

#+begin_src sql
   select id, name, fans from user
	   order by fans desc
	   limit 10; 
#+end_src

| id                     | name      | fans |
|------------------------+-----------+------|
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |

* Part 2: Inferences and Analysis

** Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

We chose the city of Phoenix and the category of foods. We first find
the list of businesses:
#+begin_src sql
select city, name, c.category from business b 
inner join category c on b.id=c.business_id
where city like 'Phoenix' and c.category like '%food%';
#+end_src

| city    | name                                   | category  |
|---------+----------------------------------------+-----------|
| Phoenix | Five Guys                              | Fast Food |
| Phoenix | McDonald's                             | Fast Food |
| Phoenix | Water N Ice                            | Food      |
| Phoenix | Bootleggers Modern American Smokehouse | Food      |
| Phoenix | Charlie D's Catfish & Chicken          | Soul Food |
| Phoenix | Charlie D's Catfish & Chicken          | Seafood   |
| Phoenix | Starbucks                              | Food      |
| Phoenix | Safeway Food & Drug                    | Food      |

Then we use another join to extract the working hours of the
businesses as follow. Additionally we discern popularity by their
received stars:
 #+begin_src sql
  select b.name, c.category, h.hours,
case when b.stars between 2 and 3 then '2-3'
  when b.stars between 4 and 5 then '4-5'
  else '<2'
  end as popularity
from business b 
inner join category c on b.id=c.business_id
left join hours h on b.id = h.business_id
where city like 'Phoenix' and c.category like '%food%';
 #+end_src
 
| name                                   | category  | hours                 | popularity |
|----------------------------------------+-----------+-----------------------+------------|
| Five Guys                              | Fast Food | Monday,10:00-22:00    |       None |
| Five Guys                              | Fast Food | Tuesday,10:00-22:00   |       None |
| Five Guys                              | Fast Food | Friday,10:00-22:00    |       None |
| Five Guys                              | Fast Food | Wednesday,10:00-22:00 |       None |
| Five Guys                              | Fast Food | Thursday,10:00-22:00  |       None |
| Five Guys                              | Fast Food | Sunday,10:00-22:00    |       None |
| Five Guys                              | Fast Food | Saturday,10:00-22:00  |       None |
| McDonald's                             | Fast Food | Monday,5:00-23:00     |        2-3 |
| McDonald's                             | Fast Food | Tuesday,5:00-23:00    |        2-3 |
| McDonald's                             | Fast Food | Friday,5:00-0:00      |        2-3 |
| McDonald's                             | Fast Food | Wednesday,5:00-23:00  |        2-3 |
| McDonald's                             | Fast Food | Thursday,5:00-23:00   |        2-3 |
| McDonald's                             | Fast Food | Sunday,5:00-23:00     |        2-3 |
| McDonald's                             | Fast Food | Saturday,5:00-0:00    |        2-3 |
| Water N Ice                            | Food      | None                  |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Monday,11:00-22:00    |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Tuesday,11:00-22:00   |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Friday,11:00-22:00    |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Wednesday,11:00-22:00 |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Thursday,11:00-22:00  |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Sunday,11:00-22:00    |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Saturday,11:00-22:00  |        4-5 |
| Charlie D's Catfish & Chicken          | Soul Food | Monday,11:00-18:00    |        4-5 |
| Charlie D's Catfish & Chicken          | Soul Food | Tuesday,11:00-18:00   |        4-5 |
| Charlie D's Catfish & Chicken          | Soul Food | Friday,11:00-18:00    |        4-5 |
(Output limit exceeded, 25 of 44 total rows shown)

*** Do the two groups you chose to analyze have a different distribution of hours?
We first inspect the working hours of the 4-5 stars businesses:
#+begin_src sql
select b.name, c.category, h.hours,
case when b.stars between 2 and 3 then '2-3'
  when b.stars between 4 and 5 then '4-5'
  else '<2'
  end as popularity
from business b 
inner join category c on b.id=c.business_id
left join hours h on b.id = h.business_id
where city like 'Phoenix' and c.category like '%food%' and popularity like '4-5';
#+end_src

| name                                   | category  | hours                 | popularity |
|----------------------------------------+-----------+-----------------------+------------|
| Water N Ice                            | Food      | None                  |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Monday,11:00-22:00    |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Tuesday,11:00-22:00   |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Friday,11:00-22:00    |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Wednesday,11:00-22:00 |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Thursday,11:00-22:00  |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Sunday,11:00-22:00    |        4-5 |
| Bootleggers Modern American Smokehouse | Food      | Saturday,11:00-22:00  |        4-5 |
| Charlie D's Catfish & Chicken          | Soul Food | Monday,11:00-18:00    |        4-5 |
| Charlie D's Catfish & Chicken          | Soul Food | Tuesday,11:00-18:00   |        4-5 |
| Charlie D's Catfish & Chicken          | Soul Food | Friday,11:00-18:00    |        4-5 |
| Charlie D's Catfish & Chicken          | Soul Food | Wednesday,11:00-18:00 |        4-5 |
| Charlie D's Catfish & Chicken          | Soul Food | Thursday,11:00-18:00  |        4-5 |
| Charlie D's Catfish & Chicken          | Soul Food | Sunday,13:00-16:00    |        4-5 |
| Charlie D's Catfish & Chicken          | Soul Food | Saturday,11:00-18:00  |        4-5 |
| Charlie D's Catfish & Chicken          | Seafood   | Monday,11:00-18:00    |        4-5 |
| Charlie D's Catfish & Chicken          | Seafood   | Tuesday,11:00-18:00   |        4-5 |
| Charlie D's Catfish & Chicken          | Seafood   | Friday,11:00-18:00    |        4-5 |
| Charlie D's Catfish & Chicken          | Seafood   | Wednesday,11:00-18:00 |        4-5 |
| Charlie D's Catfish & Chicken          | Seafood   | Thursday,11:00-18:00  |        4-5 |
| Charlie D's Catfish & Chicken          | Seafood   | Sunday,13:00-16:00    |        4-5 |
| Charlie D's Catfish & Chicken          | Seafood   | Saturday,11:00-18:00  |        4-5 |

In another query we inspect the working hours of low popular group:
#+begin_src sql
select b.name, c.category, h.hours,
case when b.stars between 2 and 3 then '2-3'
  when b.stars between 4 and 5 then '4-5'
  else '<2'
  end as popularity
from business b 
inner join category c on b.id=c.business_id
left join hours h on b.id = h.business_id
where city like 'Phoenix' and c.category like '%food%' and popularity like '2-3';
#+end_src

| name                | category  | hours                | popularity |
|---------------------+-----------+----------------------+------------|
| McDonald's          | Fast Food | Monday,5:00-23:00    |        2-3 |
| McDonald's          | Fast Food | Tuesday,5:00-23:00   |        2-3 |
| McDonald's          | Fast Food | Friday,5:00-0:00     |        2-3 |
| McDonald's          | Fast Food | Wednesday,5:00-23:00 |        2-3 |
| McDonald's          | Fast Food | Thursday,5:00-23:00  |        2-3 |
| McDonald's          | Fast Food | Sunday,5:00-23:00    |        2-3 |
| McDonald's          | Fast Food | Saturday,5:00-0:00   |        2-3 |
| Starbucks           | Food      | Monday,5:00-20:00    |        2-3 |
| Starbucks           | Food      | Tuesday,5:00-20:00   |        2-3 |
| Starbucks           | Food      | Friday,5:00-20:00    |        2-3 |
| Starbucks           | Food      | Wednesday,5:00-20:00 |        2-3 |
| Starbucks           | Food      | Thursday,5:00-20:30  |        2-3 |
| Starbucks           | Food      | Sunday,5:00-20:00    |        2-3 |
| Starbucks           | Food      | Saturday,5:00-20:00  |        2-3 |
| Safeway Food & Drug | Food      | None                 |        2-3 |

Comparing the two tables show that more popular businesses open later
around 11 while less popular businesses open sooner. The number of
businesses in our table is not enough for making any correlation
though.

*** Do the two groups you chose to analyze have a different number of reviews?

#+begin_src sql
select  sum(b.review_count) as number_of_reviews,
case when b.stars between 2 and 3 then '2-3'
  when b.stars between 4 and 5 then '4-5'
  else '<2'
  end as popularity
from business b 
inner join category c on b.id=c.business_id
left join hours h on b.id = h.business_id
where city like 'Phoenix' and c.category like '%food%' group by popularity;
#+end_src
In the above code, reviews given to businesses at different categories
are added and grouped.

| number_of_reviews | popularity |
|-------------------+------------|
|               434 | 2-3        |
|              3119 | 4-5        |
|               441 | <2         |

It can be seen that more popular businesses have many more reviews.

*** Are you able to infer anything from the location data provided between these two groups? Explain.

First, location data are retrieved for businesses. No neighborhood
data is available only address is available:
#+begin_src sql
select b.name, b.address,
case when b.stars between 2 and 3 then '2-3'
  when b.stars between 4 and 5 then '4-5'
  else '<2'
  end as popularity
from business b 
inner join category c on b.id=c.business_id
where city like 'Phoenix' and c.category like '%food%';
#+end_src

| name                                   | address                     | popularity |
|----------------------------------------+-----------------------------+------------|
| Five Guys                              | 2641 N 44th St, Ste 100     |         <2 |
| McDonald's                             | 1850 S 7th St               |        2-3 |
| Water N Ice                            | 4212 W Cactus Rd, Ste 1114  |        4-5 |
| Bootleggers Modern American Smokehouse | 3375 E Shea Blvd            |        4-5 |
| Charlie D's Catfish & Chicken          | 1153 E Jefferson St         |        4-5 |
| Charlie D's Catfish & Chicken          | 1153 E Jefferson St         |        4-5 |
| Starbucks                              | 4605 E Chandler Blvd, Ste A |        2-3 |
| Safeway Food & Drug                    | 3450 W Bell Rd              |        2-3 |

From the output, it can be seen that most popular businesses are in
the east but there is one also in west.

** Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
 First, list of all businesses that are closed in the city of Phoenix
 is retrieved:
#+begin_src sql
select b.name, b.is_open, c.category, b.address,
case when b.stars between 2 and 3 then '2-3'
  when b.stars between 4 and 5 then '4-5'
  else '<2'
  end as popularity
from business b 
inner join category c on b.id=c.business_id
where city like 'Phoenix' and b.is_open like '0';
#+end_src

| name                          | is_open | category               | address                 | popularity |
|-------------------------------+---------+------------------------+-------------------------+------------|
| Charlie D's Catfish & Chicken |       0 | American (Traditional) | 1153 E Jefferson St     |        4-5 |
| Charlie D's Catfish & Chicken |       0 | Soul Food              | 1153 E Jefferson St     |        4-5 |
| Charlie D's Catfish & Chicken |       0 | Restaurants            | 1153 E Jefferson St     |        4-5 |
| Charlie D's Catfish & Chicken |       0 | Seafood                | 1153 E Jefferson St     |        4-5 |
| Grotown Horticulture Supply   |       0 | Shopping               | 1945 E Indian School Rd |        4-5 |
| Grotown Horticulture Supply   |       0 | Home & Garden          | 1945 E Indian School Rd |        4-5 |
| Grotown Horticulture Supply   |       0 | Nurseries & Gardening  | 1945 E Indian School Rd |        4-5 |

Then the list of open businesses are retrieved:

#+begin_src sql
select b.name, b.is_open, c.category,
case when b.stars between 2 and 3 then '2-3'
  when b.stars between 4 and 5 then '4-5'
  else '<2'
  end as popularity
from business b 
inner join category c on b.id=c.business_id
where city like 'Phoenix' and b.is_open like '1';
#+end_src

| name                                   | is_open | category                  | popularity |
|----------------------------------------+---------+---------------------------+------------|
| Back-Health Chiropractic               |       1 | Chiropractors             |        4-5 |
| Back-Health Chiropractic               |       1 | Health & Medical          |        4-5 |
| Five Guys                              |       1 | American (New)            |         <2 |
| Five Guys                              |       1 | Burgers                   |         <2 |
| Five Guys                              |       1 | Fast Food                 |         <2 |
| Five Guys                              |       1 | Restaurants               |         <2 |
| Standard Restaurant Supply             |       1 | Shopping                  |         <2 |
| Standard Restaurant Supply             |       1 | Wholesalers               |         <2 |
| Standard Restaurant Supply             |       1 | Restaurant Supplies       |         <2 |
| Standard Restaurant Supply             |       1 | Professional Services     |         <2 |
| Standard Restaurant Supply             |       1 | Wholesale Stores          |         <2 |
| McDonald's                             |       1 | Burgers                   |        2-3 |
| McDonald's                             |       1 | Restaurants               |        2-3 |
| McDonald's                             |       1 | Fast Food                 |        2-3 |
| Water N Ice                            |       1 | Food                      |        4-5 |
| Water N Ice                            |       1 | Ice Cream & Frozen Yogurt |        4-5 |
| Water N Ice                            |       1 | Convenience Stores        |        4-5 |
| Pinnacle Fencing Solutions             |       1 | Home Services             |        4-5 |
| Pinnacle Fencing Solutions             |       1 | Contractors               |        4-5 |
| Pinnacle Fencing Solutions             |       1 | Fences & Gates            |        4-5 |
| Bootleggers Modern American Smokehouse |       1 | Nightlife                 |        4-5 |
| Bootleggers Modern American Smokehouse |       1 | Bars                      |        4-5 |
| Bootleggers Modern American Smokehouse |       1 | Food                      |        4-5 |
| Bootleggers Modern American Smokehouse |       1 | Restaurants               |        4-5 |
| Bootleggers Modern American Smokehouse |       1 | Smokehouse                |        4-5 |
(Output limit exceeded, 25 of 66 total rows shown)

Comparing the two tables show that all that are closed now
1. have been popular with 4-5 stars
2. all the closed businesses are in the east of the city while the
   open businesses are scattered around the city (the address for open
   businesses are omitted in the output for brevity)

** For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business
attributes for sentiment analysis, clustering businesses to find
commonalities or anomalies between them, predicting the overall star
rating for a business, predicting the number of fans a user will have,
and so on. These are just a few examples to get you started, so feel
free to be creative and come up with your own problem you want to
solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for
your analysis and why you chose that data:
                           
                  
iii. Output of your finished dataset:
         
         
iv. Provide the SQL code you used to create your final dataset:

*** Analysis
A clustering analysis is performed to see how many business exist in
different groups, how many reviews such a group has received, and the
average stars they have.

To come up with these data, tables 'business' and 'category' need to
join using business_id index. Additionally, to identify a category for a
business, semantic analysis using CASE statement needs to be performed
with related keywords for each category.

As the first group, businesses with the name 'food' and 'restaurant'
in their name are put into the category of Food.

#+begin_src sql
select count(*) as total_number_of_businesses, 
sum(b.review_count) as total_reviews, 
avg(b.stars) as average_stars, 
case when c.category like '%food%'
or c.category like '%restaurant%' then 'Food' 
end as cat_group
from business b 
inner join category c on b.id = c.business_id
where cat_group like 'Food'
#+end_src

| total_number_of_businesses | total_reviews |     average_stars | cat_group |
|----------------------------+---------------+-------------------+-----------|
|                        117 |          8892 | 3.572649572649573 | Food      |

The other group is called Services and it recognizes businesses with
the word 'service' in them.

#+begin_src sql
select count(*) as total_number_of_businesses, 
sum(b.review_count) as total_reviews, 
avg(b.stars) as average_stars, 
case when c.category like '%service%' 
then 'Services'
end as cat_group
from business b 
inner join category c on b.id = c.business_id
where cat_group like 'Services'
#+end_src

| total_number_of_businesses | total_reviews |      average_stars | cat_group |
|----------------------------+---------------+--------------------+-----------|
|                         56 |          1153 | 3.9910714285714284 | Services  |

From our analysis so far we can see that the group Services has
received slightly better stars 3.99 versus 3.57. Also we can see that
Food category has higher number of businesses than Services, 117
versus 56.

We can ask an interesting question about the average number of reviews
a business has received in each category. To find this, the
total_reviews should be divided by the total_number_of_businesses. The
result is called average review count:

| cat_group | average review count |
|-----------+----------------------|
| Services  |                 20.6 |
| Food      |                   76 |

Average review count shows that Food category businesses on average
have received many more reviews than Services, 76 versus 20.6. 
